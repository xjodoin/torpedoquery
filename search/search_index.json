{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TorpedoQuery","text":"<p>TorpedoQuery is a simple and powerful query builder for your Java projects. It can be used with any existing Hibernate or JPA application.</p> <p>Stop wasting your time maintaining complex HQL queries and start today with the new generation of query builders.</p>"},{"location":"#why-torpedoquery","title":"Why TorpedoQuery?","text":"<ul> <li>Type-safe: Leverage Java's type system to avoid runtime errors</li> <li>Refactoring-friendly: Changes to your entity model are immediately reflected in your queries</li> <li>Intuitive API: Chain methods naturally to build complex queries</li> <li>Integration-ready: Works with existing JPA/Hibernate infrastructure</li> <li>Zero configuration: Simply import the library and start using it</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>// Import the static methods\nimport static org.torpedoquery.jpa.Torpedo.*;\n\n// Create a simple query\nEntity entity = from(Entity.class);\nwhere(entity.getCode()).eq(\"mycode\");\nQuery&lt;Entity&gt; query = select(entity);\n\n// Execute the query using your EntityManager\nList&lt;Entity&gt; results = query.list(entityManager);\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Create queries with a fluent, type-safe API</li> <li>Support for all major JPA operations:</li> <li>SELECT, FROM, WHERE, JOIN, GROUP BY, ORDER BY</li> <li>Subqueries</li> <li>Functions (COUNT, SUM, AVG, etc.)</li> <li>Dynamic query building</li> <li>Integration with standard JPA EntityManager</li> <li>Minimal dependencies</li> <li>Small footprint</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out the Quick Start guide to begin using TorpedoQuery in your application.</p>"},{"location":"#security","title":"Security","text":"<p>To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides a reference of TorpedoQuery's API and main classes. For detailed examples and use cases, refer to the specific documentation pages.</p>"},{"location":"api-reference/#core-classes","title":"Core Classes","text":""},{"location":"api-reference/#torpedo","title":"Torpedo","text":"<p>The <code>Torpedo</code> class is the main entry point for creating queries. It contains static methods for all the main query operations.</p> <pre><code>import static org.torpedoquery.jpa.Torpedo.*;\n</code></pre>"},{"location":"api-reference/#main-methods","title":"Main Methods","text":"Method Description <code>from(Class&lt;T&gt; entityClass)</code> Creates a proxy for the specified entity class to start building a query <code>select(Object... selects)</code> Creates a query with the given selections <code>where(Object object)</code> Starts building a WHERE clause on the specified field <code>condition()</code> Creates an empty logical condition <code>condition(Object object)</code> Creates a logical condition on the specified field <code>innerJoin(Object object)</code> Creates an inner join with the specified relation <code>leftJoin(Object object)</code> Creates a left join with the specified relation <code>rightJoin(Object object)</code> Creates a right join with the specified relation <code>with(OnGoingLogicalCondition condition)</code> Adds a condition to a join (WITH clause) <code>with(Object value)</code> Starts building a WITH condition on a joined relation <code>groupBy(Object... groups)</code> Creates a GROUP BY clause for the specified fields <code>orderBy(Object... orders)</code> Creates an ORDER BY clause for the specified fields <code>extend(Object proxy, Class&lt;T&gt; subType)</code> Extends a proxy to a subtype to access subtype-specific methods <code>dyn(Object constructor)</code> Creates a dynamic instantiation expression (for custom result mapping) <code>param(Object value)</code> Used inside dyn() to specify constructor parameters <code>and(OnGoingLogicalCondition... conditions)</code> Combines conditions with AND <code>or(OnGoingLogicalCondition... conditions)</code> Combines conditions with OR"},{"location":"api-reference/#torpedofunction","title":"TorpedoFunction","text":"<p>The <code>TorpedoFunction</code> class provides access to JPA/JPQL functions.</p> <pre><code>import static org.torpedoquery.jpa.TorpedoFunction.*;\n</code></pre>"},{"location":"api-reference/#available-functions","title":"Available Functions","text":"Function Description <code>count(Object value)</code> COUNT function <code>sum(Object value)</code> SUM function <code>min(Object value)</code> MIN function <code>max(Object value)</code> MAX function <code>avg(Object value)</code> AVG function <code>distinct(Object value)</code> DISTINCT function <code>coalesce(Object... values)</code> COALESCE function <code>length(Object value)</code> LENGTH function <code>lower(Object value)</code> LOWER function <code>upper(Object value)</code> UPPER function <code>trim(Object value)</code> TRIM function <code>substring(Object value, int start, int length)</code> SUBSTRING function <code>index(Object value)</code> INDEX function <code>function(String name, Class&lt;?&gt; returnType, Object... params)</code> Generic function support <code>constant(Object constant)</code> Creates a constant value for use in operations <code>operation(Object left)</code> Starts an arithmetic operation <code>asc(Object value)</code> ASC ordering directive <code>desc(Object value)</code> DESC ordering directive"},{"location":"api-reference/#query","title":"Query <p>The <code>Query&lt;T&gt;</code> interface represents a compiled query ready for execution.</p>","text":""},{"location":"api-reference/#methods","title":"Methods","text":"Method Description <code>T get(EntityManager entityManager)</code> Executes the query and returns a single result <code>List&lt;T&gt; list(EntityManager entityManager)</code> Executes the query and returns a list of results <code>String getQuery()</code> Returns the generated HQL/JPQL query string <code>Map&lt;String, Object&gt; getParameters()</code> Returns the parameter map for the query <code>Optional&lt;OnGoingLogicalCondition&gt; condition()</code> Returns the query's condition if it exists"},{"location":"api-reference/#condition-interfaces","title":"Condition Interfaces","text":""},{"location":"api-reference/#ongoingcomparablecondition","title":"OnGoingComparableCondition <p>Interface for conditions on comparable values.</p>","text":""},{"location":"api-reference/#methods_1","title":"Methods","text":"Method Description <code>OnGoingLogicalCondition eq(T value)</code> Equality <code>OnGoingLogicalCondition neq(T value)</code> Inequality <code>OnGoingLogicalCondition lt(T value)</code> Less than <code>OnGoingLogicalCondition lte(T value)</code> Less than or equal <code>OnGoingLogicalCondition gt(T value)</code> Greater than <code>OnGoingLogicalCondition gte(T value)</code> Greater than or equal <code>OnGoingLogicalCondition between(T start, T end)</code> Between <code>OnGoingLogicalCondition notBetween(T start, T end)</code> Not between <code>OnGoingLogicalCondition in(T... values)</code> In a list of values <code>OnGoingLogicalCondition in(Collection&lt;T&gt; values)</code> In a collection <code>OnGoingLogicalCondition in(Query&lt;T&gt; subQuery)</code> In a subquery <code>OnGoingLogicalCondition notIn(T... values)</code> Not in a list of values <code>OnGoingLogicalCondition notIn(Collection&lt;T&gt; values)</code> Not in a collection <code>OnGoingLogicalCondition notIn(Query&lt;T&gt; subQuery)</code> Not in a subquery"},{"location":"api-reference/#ongoingstringcondition","title":"OnGoingStringCondition <p>Interface for string-specific conditions.</p>","text":""},{"location":"api-reference/#methods_2","title":"Methods","text":"Method Description <code>ValueOnGoingStringCondition like()</code> Like comparison <code>ValueOnGoingStringCondition notLike()</code> Not like comparison"},{"location":"api-reference/#valueongoingstringcondition","title":"ValueOnGoingStringCondition <p>Interface for specifying like patterns.</p>","text":""},{"location":"api-reference/#methods_3","title":"Methods","text":"Method Description <code>OnGoingLogicalCondition any(String value)</code> %value% <code>OnGoingLogicalCondition startsWith(String value)</code> value% <code>OnGoingLogicalCondition endsWith(String value)</code> %value"},{"location":"api-reference/#ongoingcollectioncondition","title":"OnGoingCollectionCondition <p>Interface for collection-specific conditions.</p>","text":""},{"location":"api-reference/#methods_4","title":"Methods","text":"Method Description <code>OnGoingLogicalCondition isEmpty()</code> Collection is empty <code>OnGoingLogicalCondition isNotEmpty()</code> Collection is not empty <code>OnGoingLogicalCondition memberOf(Object value)</code> Value is a member of collection <code>OnGoingComparableCondition&lt;Integer&gt; size()</code> Collection size"},{"location":"api-reference/#ongoinglogicalcondition","title":"OnGoingLogicalCondition <p>Interface for logical conditions that can be combined.</p>","text":""},{"location":"api-reference/#methods_5","title":"Methods","text":"Method Description <code>OnGoingLogicalCondition and(Object value)</code> AND with another condition <code>OnGoingLogicalCondition or(Object value)</code> OR with another condition <code>boolean isEmpty()</code> Check if the condition is empty"},{"location":"api-reference/#examples","title":"Examples","text":""},{"location":"api-reference/#basic-query","title":"Basic Query <pre><code>// Import static methods\nimport static org.torpedoquery.jpa.Torpedo.*;\nimport static org.torpedoquery.jpa.TorpedoFunction.*;\n\n// Create a query\nEntity entity = from(Entity.class);\nwhere(entity.getCode()).eq(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n\n// Execute the query\nEntityManager em = getEntityManager();\nList&lt;Entity&gt; results = query.list(em);\n</code></pre>","text":""},{"location":"api-reference/#complex-query","title":"Complex Query <pre><code>// Create entity proxies\nEntity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\n\n// Add conditions\nwhere(entity.isActive()).eq(true)\n    .and(subEntity.getCode()).like().startsWith(\"PREFIX_\");\n\n// Add grouping and aggregation\ngroupBy(entity.getName())\n    .having(count(subEntity)).gt(5);\n\n// Add ordering\norderBy(desc(count(subEntity)), entity.getName());\n\n// Create and execute query\nQuery&lt;Object[]&gt; query = select(entity.getName(), count(subEntity));\nList&lt;Object[]&gt; results = query.list(entityManager);\n</code></pre> <p>For more detailed examples and advanced usage, refer to the other documentation pages.</p>","text":""},{"location":"contributing/","title":"Contributing to TorpedoQuery","text":"<p>Thank you for your interest in contributing to TorpedoQuery! This document provides guidelines and information about contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<ol> <li> <p>Fork the Repository: Start by forking xjodoin/torpedoquery on GitHub.</p> </li> <li> <p>Clone Your Fork:    <pre><code>git clone https://github.com/YOUR_USERNAME/torpedoquery.git\ncd torpedoquery\n</code></pre></p> </li> <li> <p>Set Up Remote:    <pre><code>git remote add upstream https://github.com/xjodoin/torpedoquery.git\n</code></pre></p> </li> <li> <p>Install Dependencies:    TorpedoQuery uses Maven for dependency management. To build the project:    <pre><code>mvn clean install\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a Branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make Your Changes: Implement your changes, following the coding conventions.</p> </li> <li> <p>Write Tests: Add or update tests to cover your changes.</p> </li> <li> <p>Run Tests:    <pre><code>mvn test\n</code></pre></p> </li> <li> <p>Submit a Pull Request: </p> </li> <li>Push your changes to your fork</li> <li>Create a pull request from your branch to the main repository's master branch</li> <li>Provide a clear description of the changes and reference any related issues</li> </ol>"},{"location":"contributing/#coding-conventions","title":"Coding Conventions","text":""},{"location":"contributing/#java-code-style","title":"Java Code Style","text":"<ul> <li>Use 4 spaces for indentation, not tabs.</li> <li>Follow standard Java naming conventions:</li> <li>Class names should be <code>CamelCase</code></li> <li>Method names should be <code>camelCase</code></li> <li>Constants should be <code>UPPER_CASE_WITH_UNDERSCORES</code></li> <li>Add appropriate Javadoc comments for public APIs.</li> <li>Keep methods focused on a single responsibility.</li> <li>Use meaningful variable and method names.</li> </ul>"},{"location":"contributing/#test-conventions","title":"Test Conventions","text":"<ul> <li>Write unit tests for new functionality.</li> <li>Ensure all tests pass before submitting a pull request.</li> <li>Tests should be named descriptively, indicating what is being tested.</li> <li>Place tests in the corresponding package under the <code>src/test</code> directory.</li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Update Documentation: Update any relevant documentation, including Javadoc, README, and this documentation site if needed.</p> </li> <li> <p>Pass All Tests: Ensure all tests pass and that there are no conflicts with the base branch.</p> </li> <li> <p>Code Review: A project maintainer will review your code. Be prepared to make changes if requested.</p> </li> <li> <p>Merge: Once approved, a maintainer will merge your pull request.</p> </li> </ol>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting issues, please include:</p> <ul> <li>A clear description of the issue</li> <li>Steps to reproduce</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Your environment (Java version, operating system, etc.)</li> <li>If possible, a minimal code example that demonstrates the issue</li> </ul>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>Feature requests are welcome! When submitting a feature request:</p> <ul> <li>Clearly describe the feature and its use case</li> <li>Explain why it would be beneficial to the project</li> <li>If possible, provide examples of how the feature might be used</li> </ul>"},{"location":"contributing/#community-guidelines","title":"Community Guidelines","text":"<ul> <li>Be respectful and considerate of others.</li> <li>Keep discussions focused on TorpedoQuery development.</li> <li>Help others when you can.</li> <li>Give constructive feedback and be open to receiving it.</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to TorpedoQuery, you agree that your contributions will be licensed under the project's Apache License 2.0.</p>"},{"location":"contributing/#security-issues","title":"Security Issues","text":"<p>To report security vulnerabilities, please use the Tidelift security contact instead of the public issue tracker. Tidelift will coordinate the fix and disclosure.</p>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions about contributing that aren't answered here, feel free to open an issue for discussion.</p> <p>Thank you for contributing to TorpedoQuery and helping to make it better!</p>"},{"location":"advanced/dynamic-queries/","title":"Dynamic Queries","text":"<p>One of TorpedoQuery's strongest features is the ability to build queries dynamically at runtime. This is especially useful for creating search screens, implementing flexible filtering, and adapting queries based on user input.</p>"},{"location":"advanced/dynamic-queries/#conditional-clause-addition","title":"Conditional Clause Addition","text":"<p>The most basic form of dynamic query building is conditionally adding WHERE clauses:</p> <pre><code>Entity entity = from(Entity.class);\n\n// Only add this condition if the parameter is provided\nString name = getUserInput();\nif (name != null &amp;&amp; !name.isEmpty()) {\n    where(entity.getName()).eq(name);\n}\n\n// Add another condition if needed\nInteger minValue = getMinValueInput();\nif (minValue != null) {\n    where(entity.getIntegerField()).gte(minValue);\n}\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>This results in a query that dynamically includes only the conditions for which values were provided.</p>"},{"location":"advanced/dynamic-queries/#using-empty-conditions","title":"Using Empty Conditions","text":"<p>TorpedoQuery allows you to create empty condition placeholders that can be filled later:</p> <pre><code>Entity entity = from(Entity.class);\nOnGoingLogicalCondition emptyCondition = condition();\nQuery&lt;Entity&gt; query = select(entity);\n\n// Later in your code, you can add to this condition\nif (shouldFilterByName()) {\n    emptyCondition.and(entity.getName()).eq(\"test\");\n}\n\nif (shouldFilterByCode()) {\n    emptyCondition.and(entity.getCode()).like().startsWith(\"ABC\");\n}\n\n// Finally, apply the condition if it's not empty\nif (!emptyCondition.isEmpty()) {\n    where(emptyCondition);\n}\n</code></pre> <p>If no conditions are added to the empty condition, no WHERE clause will be added to the query.</p>"},{"location":"advanced/dynamic-queries/#testing-if-conditions-have-been-added","title":"Testing If Conditions Have Been Added","text":"<p>You can check if conditions have already been added to your query:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Entity&gt; query = select(entity);\n\n// Check if conditions exist\nOptional&lt;OnGoingLogicalCondition&gt; existingCondition = query.condition();\nif (existingCondition.isPresent()) {\n    // Add to existing condition\n    existingCondition.get().and(entity.getCode()).eq(\"newCode\");\n} else {\n    // Create new condition\n    where(entity.getCode()).eq(\"newCode\");\n}\n</code></pre>"},{"location":"advanced/dynamic-queries/#building-complex-dynamic-conditions","title":"Building Complex Dynamic Conditions","text":"<p>For more complex scenarios, you can build condition groups:</p> <pre><code>Entity entity = from(Entity.class);\n\n// Create a condition group for status filters\nOnGoingLogicalCondition statusConditions = condition();\nif (includeActive()) {\n    statusConditions.or(entity.isActive()).eq(true);\n}\nif (includePending()) {\n    statusConditions.or(entity.getStatus()).eq(\"PENDING\");\n}\n\n// Create a condition group for date filters\nOnGoingLogicalCondition dateConditions = condition();\nif (startDate != null) {\n    dateConditions.and(entity.getDateField()).gte(startDate);\n}\nif (endDate != null) {\n    dateConditions.and(entity.getDateField()).lte(endDate);\n}\n\n// Combine the condition groups\nif (!statusConditions.isEmpty() &amp;&amp; !dateConditions.isEmpty()) {\n    where(statusConditions).and(dateConditions);\n} else if (!statusConditions.isEmpty()) {\n    where(statusConditions);\n} else if (!dateConditions.isEmpty()) {\n    where(dateConditions);\n}\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre>"},{"location":"advanced/dynamic-queries/#dynamic-joins","title":"Dynamic Joins","text":"<p>You can also dynamically add joins based on requirements:</p> <pre><code>Entity entity = from(Entity.class);\n\n// Only join with sub-entities if we need them\nif (needSubEntityData()) {\n    SubEntity subEntity = innerJoin(entity.getSubEntities());\n\n    // Add conditions on the joined entity\n    if (subEntityCode != null) {\n        with(subEntity.getCode()).eq(subEntityCode);\n    }\n}\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre>"},{"location":"advanced/dynamic-queries/#dynamic-select-clauses","title":"Dynamic Select Clauses","text":"<p>Create dynamic SELECT clauses to determine what fields to return:</p> <pre><code>Entity entity = from(Entity.class);\nList&lt;Object&gt; selectFields = new ArrayList&lt;&gt;();\n\n// Always select the ID\nselectFields.add(entity.getId());\n\n// Conditionally add other fields\nif (includeBasicInfo()) {\n    selectFields.add(entity.getName());\n    selectFields.add(entity.getCode());\n}\n\nif (includeMetrics()) {\n    selectFields.add(entity.getIntegerField());\n    selectFields.add(entity.getBigDecimalField());\n}\n\n// Convert to array\nObject[] selectArray = selectFields.toArray();\n\n// Create query with dynamic select fields\nQuery&lt;Object[]&gt; query = select(selectArray);\n</code></pre>"},{"location":"advanced/dynamic-queries/#dynamic-sorting","title":"Dynamic Sorting","text":"<p>Add sorting criteria dynamically:</p> <pre><code>Entity entity = from(Entity.class);\n\n// Get sort field and direction from user\nString sortField = getSortField(); // e.g. \"name\", \"code\", \"date\"\nString sortDirection = getSortDirection(); // \"asc\" or \"desc\"\n\n// Apply sort based on user input\nif (\"name\".equals(sortField)) {\n    if (\"desc\".equals(sortDirection)) {\n        orderBy(desc(entity.getName()));\n    } else {\n        orderBy(asc(entity.getName()));\n    }\n} else if (\"code\".equals(sortField)) {\n    if (\"desc\".equals(sortDirection)) {\n        orderBy(desc(entity.getCode()));\n    } else {\n        orderBy(asc(entity.getCode()));\n    }\n} else if (\"date\".equals(sortField)) {\n    if (\"desc\".equals(sortDirection)) {\n        orderBy(desc(entity.getDateField()));\n    } else {\n        orderBy(asc(entity.getDateField()));\n    }\n}\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre>"},{"location":"advanced/dynamic-queries/#search-form-example","title":"Search Form Example","text":"<p>Here's a comprehensive example of implementing a search form:</p> <pre><code>public List&lt;Entity&gt; search(SearchForm form) {\n    Entity entity = from(Entity.class);\n\n    // Start with an empty condition\n    OnGoingLogicalCondition searchCondition = condition();\n\n    // Add text search if provided\n    if (form.getSearchText() != null &amp;&amp; !form.getSearchText().isEmpty()) {\n        String searchPattern = \"%\" + form.getSearchText() + \"%\";\n        OnGoingLogicalCondition textSearch = condition(entity.getName()).like(searchPattern)\n            .or(entity.getCode()).like(searchPattern);\n        searchCondition.and(textSearch);\n    }\n\n    // Add date range if provided\n    if (form.getStartDate() != null) {\n        searchCondition.and(entity.getDateField()).gte(form.getStartDate());\n    }\n    if (form.getEndDate() != null) {\n        searchCondition.and(entity.getDateField()).lte(form.getEndDate());\n    }\n\n    // Add status filter if provided\n    if (form.getStatusList() != null &amp;&amp; !form.getStatusList().isEmpty()) {\n        searchCondition.and(entity.getStatus()).in(form.getStatusList());\n    }\n\n    // Apply the condition if not empty\n    if (!searchCondition.isEmpty()) {\n        where(searchCondition);\n    }\n\n    // Add sorting\n    if (\"dateDesc\".equals(form.getSortOption())) {\n        orderBy(desc(entity.getDateField()));\n    } else if (\"dateAsc\".equals(form.getSortOption())) {\n        orderBy(asc(entity.getDateField()));\n    } else if (\"nameAsc\".equals(form.getSortOption())) {\n        orderBy(asc(entity.getName()));\n    } else {\n        // Default sorting\n        orderBy(desc(entity.getDateField()));\n    }\n\n    // Create and execute the query\n    Query&lt;Entity&gt; query = select(entity);\n    return query.list(entityManager);\n}\n</code></pre>"},{"location":"advanced/dynamic-queries/#advanced-example-dynamic-report-builder","title":"Advanced Example: Dynamic Report Builder","text":"<p>Here's an advanced example that builds a complex report query dynamically:</p> <pre><code>public List&lt;ReportData&gt; generateReport(ReportSettings settings) {\n    Entity entity = from(Entity.class);\n\n    // Dynamic joins based on included data\n    SubEntity subEntity = null;\n    if (settings.includeSubEntityData()) {\n        subEntity = leftJoin(entity.getSubEntities());\n    }\n\n    // Build select fields based on requested columns\n    List&lt;Object&gt; selectFields = new ArrayList&lt;&gt;();\n    for (String column : settings.getColumns()) {\n        switch (column) {\n            case \"id\":\n                selectFields.add(entity.getId());\n                break;\n            case \"name\":\n                selectFields.add(entity.getName());\n                break;\n            case \"active\":\n                selectFields.add(entity.isActive());\n                break;\n            case \"subEntityCount\":\n                if (subEntity != null) {\n                    selectFields.add(count(subEntity));\n                }\n                break;\n            case \"avgValue\":\n                if (subEntity != null) {\n                    selectFields.add(avg(subEntity.getNumberField()));\n                }\n                break;\n            // Add other columns as needed\n        }\n    }\n\n    // Add conditions based on filters\n    OnGoingLogicalCondition filterCondition = condition();\n    for (ReportFilter filter : settings.getFilters()) {\n        switch (filter.getField()) {\n            case \"name\":\n                addStringFilter(filterCondition, entity.getName(), filter);\n                break;\n            case \"active\":\n                addBooleanFilter(filterCondition, entity.isActive(), filter);\n                break;\n            case \"date\":\n                addDateFilter(filterCondition, entity.getDateField(), filter);\n                break;\n            case \"value\":\n                addNumericFilter(filterCondition, entity.getIntegerField(), filter);\n                break;\n            // Add other filters as needed\n        }\n    }\n\n    if (!filterCondition.isEmpty()) {\n        where(filterCondition);\n    }\n\n    // Add grouping if needed for aggregations\n    if (settings.isAggregated()) {\n        groupBy(entity.getId(), entity.getName(), entity.isActive());\n    }\n\n    // Add sorting\n    for (ReportSorting sort : settings.getSorting()) {\n        switch (sort.getField()) {\n            case \"name\":\n                addSorting(entity.getName(), sort.getDirection());\n                break;\n            case \"date\":\n                addSorting(entity.getDateField(), sort.getDirection());\n                break;\n            // Add other sort fields as needed\n        }\n    }\n\n    // Create and execute query\n    Query&lt;Object[]&gt; query = select(selectFields.toArray());\n    List&lt;Object[]&gt; results = query.list(entityManager);\n\n    // Convert results to report data objects\n    return convertToReportData(results, settings.getColumns());\n}\n\n// Helper methods for the report builder\nprivate void addStringFilter(OnGoingLogicalCondition condition, String field, ReportFilter filter) {\n    // Implementation details...\n}\n\nprivate void addSorting(Object field, String direction) {\n    if (\"desc\".equals(direction)) {\n        orderBy(desc(field));\n    } else {\n        orderBy(asc(field));\n    }\n}\n</code></pre> <p>Dynamic query building with TorpedoQuery enables you to create powerful, flexible queries that adapt to user input while maintaining type safety and clean code structure.</p>"},{"location":"advanced/examples/","title":"Real-World Examples","text":"<p>This page presents various real-world examples to showcase TorpedoQuery's capabilities in practical scenarios. These examples are designed to demonstrate how to apply TorpedoQuery's features to solve common query requirements.</p>"},{"location":"advanced/examples/#example-1-user-search-with-filtering-and-pagination","title":"Example 1: User Search with Filtering and Pagination","text":"<p>This example demonstrates a user search functionality with multiple filters and pagination:</p> <pre><code>public class UserSearchService {\n\n    private final EntityManager entityManager;\n\n    public UserSearchService(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n\n    public SearchResult&lt;User&gt; searchUsers(UserSearchCriteria criteria) {\n        User user = from(User.class);\n\n        // Build search condition\n        OnGoingLogicalCondition condition = condition();\n\n        // Search by name\n        if (criteria.getName() != null &amp;&amp; !criteria.getName().isEmpty()) {\n            condition.and(\n                condition(user.getFirstName()).like().any(criteria.getName())\n                .or(user.getLastName()).like().any(criteria.getName())\n            );\n        }\n\n        // Filter by status\n        if (criteria.getStatus() != null) {\n            condition.and(user.getStatus()).eq(criteria.getStatus());\n        }\n\n        // Filter by date range\n        if (criteria.getCreatedFrom() != null) {\n            condition.and(user.getCreatedDate()).gte(criteria.getCreatedFrom());\n        }\n        if (criteria.getCreatedTo() != null) {\n            condition.and(user.getCreatedDate()).lte(criteria.getCreatedTo());\n        }\n\n        // Apply the condition if not empty\n        if (!condition.isEmpty()) {\n            where(condition);\n        }\n\n        // Apply sorting\n        if (\"nameAsc\".equals(criteria.getSort())) {\n            orderBy(user.getLastName(), user.getFirstName());\n        } else if (\"nameDesc\".equals(criteria.getSort())) {\n            orderBy(desc(user.getLastName()), desc(user.getFirstName()));\n        } else if (\"dateAsc\".equals(criteria.getSort())) {\n            orderBy(user.getCreatedDate());\n        } else {\n            // Default sort by creation date desc\n            orderBy(desc(user.getCreatedDate()));\n        }\n\n        // Create the query\n        Query&lt;User&gt; query = select(user);\n\n        // Count total results (for pagination)\n        Query&lt;Long&gt; countQuery = select(count(user));\n        Long totalCount = countQuery.get(entityManager);\n\n        // Execute paginated query\n        javax.persistence.Query jpaQuery = entityManager.createQuery(query.getQuery());\n\n        // Apply parameters\n        for (Map.Entry&lt;String, Object&gt; entry : query.getParameters().entrySet()) {\n            jpaQuery.setParameter(entry.getKey(), entry.getValue());\n        }\n\n        // Set pagination\n        jpaQuery.setFirstResult(criteria.getPageNumber() * criteria.getPageSize());\n        jpaQuery.setMaxResults(criteria.getPageSize());\n\n        List&lt;User&gt; results = jpaQuery.getResultList();\n\n        return new SearchResult&lt;&gt;(results, totalCount, criteria.getPageNumber(), criteria.getPageSize());\n    }\n}\n</code></pre>"},{"location":"advanced/examples/#example-2-complex-reporting-query","title":"Example 2: Complex Reporting Query","text":"<p>This example creates a report with aggregated data across multiple entities:</p> <pre><code>public class SalesReportingService {\n\n    private final EntityManager entityManager;\n\n    public SalesReportingService(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n\n    public List&lt;SalesReportEntry&gt; generateSalesReport(\n            LocalDate fromDate, \n            LocalDate toDate, \n            List&lt;String&gt; productCategories, \n            String region) {\n\n        // Define main entities\n        Order order = from(Order.class);\n        OrderItem item = innerJoin(order.getItems());\n        Product product = innerJoin(item.getProduct());\n        Customer customer = innerJoin(order.getCustomer());\n\n        // Build where conditions\n        where(order.getOrderDate()).between(fromDate, toDate);\n\n        if (productCategories != null &amp;&amp; !productCategories.isEmpty()) {\n            where(product.getCategory()).in(productCategories);\n        }\n\n        if (region != null &amp;&amp; !region.isEmpty()) {\n            where(customer.getRegion()).eq(region);\n        }\n\n        // Group by product and month\n        groupBy(product.getId(), product.getName(), product.getCategory())\n            .having(sum(item.getQuantity())).gt(0);\n\n        // Order by product category and total revenue\n        orderBy(product.getCategory(), desc(sum(operation(item.getQuantity()).multiply(item.getUnitPrice()))));\n\n        // Select the report data\n        Query&lt;Object[]&gt; query = select(\n            product.getId(),\n            product.getName(),\n            product.getCategory(),\n            sum(item.getQuantity()),\n            sum(operation(item.getQuantity()).multiply(item.getUnitPrice())),\n            avg(item.getUnitPrice())\n        );\n\n        // Execute the query\n        List&lt;Object[]&gt; results = query.list(entityManager);\n\n        // Map results to report entries\n        return results.stream()\n            .map(row -&gt; new SalesReportEntry(\n                (String) row[0],  // productId\n                (String) row[1],  // productName\n                (String) row[2],  // category\n                (Long) row[3],    // totalQuantity\n                (BigDecimal) row[4], // totalRevenue\n                (BigDecimal) row[5]  // avgPrice\n            ))\n            .collect(Collectors.toList());\n    }\n}\n</code></pre>"},{"location":"advanced/examples/#example-3-hierarchical-data-query","title":"Example 3: Hierarchical Data Query","text":"<p>This example demonstrates working with hierarchical data (organization structure):</p> <pre><code>public class OrganizationService {\n\n    private final EntityManager entityManager;\n\n    public OrganizationService(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n\n    public List&lt;DepartmentDTO&gt; getDepartmentHierarchy(String topLevelDepartmentCode) {\n        // Get the top-level department\n        Department topDept = from(Department.class);\n        where(topDept.getCode()).eq(topLevelDepartmentCode);\n        Department topLevelDept = select(topDept).get(entityManager);\n\n        // Build the hierarchy\n        return buildDepartmentHierarchy(topLevelDept.getId());\n    }\n\n    private List&lt;DepartmentDTO&gt; buildDepartmentHierarchy(String parentId) {\n        // Get direct child departments\n        Department dept = from(Department.class);\n        where(dept.getParentId()).eq(parentId);\n        orderBy(dept.getName());\n        List&lt;Department&gt; departments = select(dept).list(entityManager);\n\n        // Transform to DTOs and recursively get children\n        return departments.stream()\n            .map(d -&gt; {\n                DepartmentDTO dto = new DepartmentDTO(\n                    d.getId(), \n                    d.getCode(),\n                    d.getName(),\n                    d.getLevel()\n                );\n\n                // Get employees in this department\n                Employee emp = from(Employee.class);\n                where(emp.getDepartmentId()).eq(d.getId());\n                where(emp.getStatus()).eq(EmployeeStatus.ACTIVE);\n                orderBy(emp.getLastName(), emp.getFirstName());\n                List&lt;Employee&gt; employees = select(emp).list(entityManager);\n\n                dto.setEmployees(employees.stream()\n                    .map(e -&gt; new EmployeeDTO(\n                        e.getId(), \n                        e.getFirstName(), \n                        e.getLastName(), \n                        e.getPosition())\n                    )\n                    .collect(Collectors.toList()));\n\n                // Recursively get child departments\n                dto.setChildDepartments(buildDepartmentHierarchy(d.getId()));\n\n                return dto;\n            })\n            .collect(Collectors.toList());\n    }\n}\n</code></pre>"},{"location":"advanced/examples/#example-4-complex-data-filtering-with-geographic-location","title":"Example 4: Complex Data Filtering with Geographic Location","text":"<p>This example performs complex filtering including geographic proximity:</p> <pre><code>public class PropertySearchService {\n\n    private final EntityManager entityManager;\n    private final LocationService locationService;\n\n    public PropertySearchService(EntityManager entityManager, LocationService locationService) {\n        this.entityManager = entityManager;\n        this.locationService = locationService;\n    }\n\n    public List&lt;Property&gt; findProperties(PropertySearchCriteria criteria) {\n        Property property = from(Property.class);\n        PropertyFeatures features = innerJoin(property.getFeatures());\n\n        // Base conditions\n        where(property.getStatus()).eq(PropertyStatus.AVAILABLE);\n\n        // Price range\n        if (criteria.getMinPrice() != null) {\n            where(property.getPrice()).gte(criteria.getMinPrice());\n        }\n        if (criteria.getMaxPrice() != null) {\n            where(property.getPrice()).lte(criteria.getMaxPrice());\n        }\n\n        // Property type\n        if (criteria.getPropertyTypes() != null &amp;&amp; !criteria.getPropertyTypes().isEmpty()) {\n            where(property.getType()).in(criteria.getPropertyTypes());\n        }\n\n        // Minimum bedrooms and bathrooms\n        if (criteria.getMinBedrooms() != null) {\n            where(property.getBedrooms()).gte(criteria.getMinBedrooms());\n        }\n        if (criteria.getMinBathrooms() != null) {\n            where(property.getBathrooms()).gte(criteria.getMinBathrooms());\n        }\n\n        // Specific amenities (using WITH clause on the features join)\n        if (criteria.getRequiredAmenities() != null &amp;&amp; !criteria.getRequiredAmenities().isEmpty()) {\n            OnGoingLogicalCondition amenitiesCondition = condition();\n            for (String amenity : criteria.getRequiredAmenities()) {\n                amenitiesCondition.or(features.getFeatureType()).eq(amenity);\n            }\n            with(amenitiesCondition);\n        }\n\n        // Location-based filtering\n        if (criteria.getCity() != null &amp;&amp; !criteria.getCity().isEmpty()) {\n            where(property.getCity()).eq(criteria.getCity());\n        }\n        if (criteria.getZipCode() != null &amp;&amp; !criteria.getZipCode().isEmpty()) {\n            where(property.getZipCode()).eq(criteria.getZipCode());\n        }\n\n        // Execute query\n        Query&lt;Property&gt; query = select(property);\n        List&lt;Property&gt; results = query.list(entityManager);\n\n        // Post-processing for distance-based filtering (if coordinates provided)\n        if (criteria.getLatitude() != null &amp;&amp; criteria.getLongitude() != null &amp;&amp; criteria.getMaxDistanceInMiles() != null) {\n            return results.stream()\n                .filter(p -&gt; locationService.calculateDistanceMiles(\n                    criteria.getLatitude(), criteria.getLongitude(),\n                    p.getLatitude(), p.getLongitude()) &lt;= criteria.getMaxDistanceInMiles())\n                .collect(Collectors.toList());\n        }\n\n        return results;\n    }\n}\n</code></pre>"},{"location":"advanced/examples/#example-5-comprehensive-usage-example-from-complexqueryexample","title":"Example 5: Comprehensive Usage Example from ComplexQueryExample","text":"<p>This example comes from the source code and demonstrates how to build a query with multiple joins and conditions:</p> <pre><code>public class ComplexQueryExample {\n\n    private EntityManager manager;\n\n    public List&lt;User&gt; findUsers() {\n        User from = from(User.class);\n        City city = innerJoin(from.getCity());\n        with(city.getCode()).in(\"one\", \"two\").or(city.getCode()).notIn(\"three\", \"four\");\n        District district = innerJoin(city.getDistrict());\n        with(district.getCode()).notIn(\"exclude1\", \"exclude2\");\n        State state = innerJoin(district.getState());\n        with(state.getCode()).eq(\"AP\").or(state.getCode()).eq(\"GUJ\").or(state.getCode()).eq(\"KTK\");\n        with(state.getCountry().getCode()).eq(\"india\");\n\n        return select(from).list(manager);\n    }\n}\n</code></pre> <p>This query: 1. Starts with the User entity 2. Joins with City, District, and State entities in a chain 3. Applies various conditions using WITH clauses on each join 4. Creates complex OR conditions for state codes 5. Accesses nested properties (state.getCountry().getCode()) 6. Returns a list of User objects that match all conditions</p>"},{"location":"advanced/examples/#example-6-advanced-dynamic-criteria-builder","title":"Example 6: Advanced Dynamic Criteria Builder","text":"<p>Here's an example of a reusable criteria builder pattern with TorpedoQuery:</p> <pre><code>public class GenericSearchService&lt;T&gt; {\n\n    private final EntityManager entityManager;\n    private final Class&lt;T&gt; entityClass;\n\n    public GenericSearchService(EntityManager entityManager, Class&lt;T&gt; entityClass) {\n        this.entityManager = entityManager;\n        this.entityClass = entityClass;\n    }\n\n    public List&lt;T&gt; search(List&lt;SearchCriterion&gt; criteria, List&lt;SortCriterion&gt; sortings, int maxResults) {\n        T entity = from(entityClass);\n\n        // Build the WHERE clause from generic criteria\n        if (criteria != null &amp;&amp; !criteria.isEmpty()) {\n            OnGoingLogicalCondition mainCondition = condition();\n            for (SearchCriterion criterion : criteria) {\n                applySearchCriterion(mainCondition, entity, criterion);\n            }\n            where(mainCondition);\n        }\n\n        // Apply sorting\n        if (sortings != null &amp;&amp; !sortings.isEmpty()) {\n            List&lt;Object&gt; sortFields = new ArrayList&lt;&gt;();\n            for (SortCriterion sort : sortings) {\n                // Use reflection to get the appropriate getter\n                try {\n                    String getterName = \"get\" + StringUtils.capitalize(sort.getFieldName());\n                    Method getterMethod = entityClass.getMethod(getterName);\n                    Object fieldValue = getterMethod.invoke(entity);\n\n                    if (\"DESC\".equalsIgnoreCase(sort.getDirection())) {\n                        sortFields.add(desc(fieldValue));\n                    } else {\n                        sortFields.add(fieldValue);\n                    }\n                } catch (Exception e) {\n                    // Log warning and continue\n                    logger.warn(\"Could not sort by field: \" + sort.getFieldName(), e);\n                }\n            }\n\n            if (!sortFields.isEmpty()) {\n                orderBy(sortFields.toArray());\n            }\n        }\n\n        // Execute query with limit\n        Query&lt;T&gt; query = select(entity);\n        javax.persistence.Query jpaQuery = entityManager.createQuery(query.getQuery());\n\n        // Apply parameters\n        for (Map.Entry&lt;String, Object&gt; entry : query.getParameters().entrySet()) {\n            jpaQuery.setParameter(entry.getKey(), entry.getValue());\n        }\n\n        if (maxResults &gt; 0) {\n            jpaQuery.setMaxResults(maxResults);\n        }\n\n        return jpaQuery.getResultList();\n    }\n\n    private void applySearchCriterion(OnGoingLogicalCondition condition, T entity, SearchCriterion criterion) {\n        try {\n            // Get the field value using reflection\n            String getterName = \"get\" + StringUtils.capitalize(criterion.getFieldName());\n            Method getterMethod = entityClass.getMethod(getterName);\n            Object fieldValue = getterMethod.invoke(entity);\n\n            // Apply appropriate operator\n            switch (criterion.getOperator()) {\n                case EQUALS:\n                    condition.and(fieldValue).eq(criterion.getValue());\n                    break;\n                case LIKE:\n                    condition.and(fieldValue).like().any(criterion.getValue().toString());\n                    break;\n                case GREATER_THAN:\n                    condition.and(fieldValue).gt(criterion.getValue());\n                    break;\n                case LESS_THAN:\n                    condition.and(fieldValue).lt(criterion.getValue());\n                    break;\n                case IN:\n                    if (criterion.getValue() instanceof Collection) {\n                        condition.and(fieldValue).in((Collection&lt;?&gt;) criterion.getValue());\n                    }\n                    break;\n                case IS_NULL:\n                    condition.and(fieldValue).isNull();\n                    break;\n                case IS_NOT_NULL:\n                    condition.and(fieldValue).isNotNull();\n                    break;\n                // Add other operators as needed\n            }\n        } catch (Exception e) {\n            // Log warning and continue\n            logger.warn(\"Could not apply criterion for field: \" + criterion.getFieldName(), e);\n        }\n    }\n}\n</code></pre> <p>This generic search service demonstrates how TorpedoQuery can be used to build a flexible, reusable search component that can work with any entity type and support various filtering and sorting options.</p>"},{"location":"advanced/subqueries/","title":"Using Subqueries","text":"<p>Subqueries are queries nested within another query. They are powerful tools for creating complex queries that can reference and compare results between different data sets. TorpedoQuery offers a clean API for creating and using subqueries.</p>"},{"location":"advanced/subqueries/#subqueries-in-where-clauses","title":"Subqueries in WHERE Clauses","text":""},{"location":"advanced/subqueries/#in-subquery","title":"IN Subquery","text":"<p>Use a subquery with the IN operator:</p> <pre><code>Entity subSelect = from(Entity.class);\nEntity entity = from(Entity.class);\nwhere(entity.getCode()).in(select(subSelect.getCode()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code IN ( SELECT entity_1.code FROM Entity entity_1 )</code></p>"},{"location":"advanced/subqueries/#not-in-subquery","title":"NOT IN Subquery","text":"<p>Use a subquery with the NOT IN operator:</p> <pre><code>Entity subSelect = from(Entity.class);\nEntity entity = from(Entity.class);\nwhere(entity.getCode()).notIn(select(subSelect.getCode()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code NOT IN ( SELECT entity_1.code FROM Entity entity_1 )</code></p>"},{"location":"advanced/subqueries/#comparison-with-subquery","title":"Comparison with Subquery","text":"<p>Compare a field with a subquery result:</p> <pre><code>Entity subSelect = from(Entity.class);\nEntity entity = from(Entity.class);\nwhere(entity.getIntegerField()).gt(select(avg(subSelect.getIntegerField())));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField &gt; ( SELECT AVG(entity_1.integerField) FROM Entity entity_1 )</code></p>"},{"location":"advanced/subqueries/#subqueries-with-parameters","title":"Subqueries with Parameters","text":"<p>Subqueries can have their own conditions:</p> <pre><code>Entity subSelect = from(Entity.class);\nwhere(subSelect.getCode()).eq(\"subquery\");\nEntity entity = from(Entity.class);\nwhere(entity.getCode()).in(select(subSelect.getCode()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code IN ( SELECT entity_1.code FROM Entity entity_1 WHERE entity_1.code = :code_2 )</code></p> <pre><code>Entity subSelect = from(Entity.class);\nwhere(subSelect.getCode()).eq(\"toto\");\nEntity entity = from(Entity.class);\nwhere(entity.getIntegerField()).gt(select(avg(subSelect.getIntegerField())));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField &gt; ( SELECT AVG(entity_1.integerField) FROM Entity entity_1 WHERE entity_1.code = :code_2 )</code></p>"},{"location":"advanced/subqueries/#subqueries-in-select-clauses","title":"Subqueries in SELECT Clauses","text":"<p>Use subqueries directly in the SELECT clause:</p> <pre><code>Entity subSelect = from(Entity.class);\nEntity entity = from(Entity.class);\nQuery&lt;Integer&gt; maxIntegerSubQuery = select(max(subSelect.getIntegerField()));\nQuery&lt;Object[]&gt; query = select(entity.getName(), maxIntegerSubQuery);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name, ( SELECT MAX(entity_1.integerField) FROM Entity entity_1 ) FROM Entity entity_0</code></p>"},{"location":"advanced/subqueries/#arithmetic-operations-with-subqueries","title":"Arithmetic Operations with Subqueries","text":"<p>Use subqueries in arithmetic operations:</p> <pre><code>Entity subSelect = from(Entity.class);\nEntity entity = from(Entity.class);\nwhere(entity.getIntegerField())\n        .eq(select(operation(subSelect.getIntegerField()).subtract(constant(1))));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField = ( SELECT entity_1.integerField - 1 FROM Entity entity_1 )</code></p>"},{"location":"advanced/subqueries/#correlated-subqueries","title":"Correlated Subqueries","text":"<p>Create correlated subqueries where the inner query references the outer query:</p> <pre><code>Entity entity = from(Entity.class);\nEntity subEntity = from(Entity.class);\nwhere(subEntity.getCode()).eq(entity.getCode());\nwhere(entity.getIntegerField()).gt(select(avg(subEntity.getIntegerField())));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>This creates a query where each row in the outer query is compared with a subquery result that depends on that row.</p>"},{"location":"advanced/subqueries/#subqueries-with-join-conditions","title":"Subqueries with Join Conditions","text":"<p>Subqueries can include joins:</p> <pre><code>Entity entity = from(Entity.class);\nEntity subSelectEntity = from(Entity.class);\nSubEntity subSelectSubEntity = innerJoin(subSelectEntity.getSubEntities());\nwhere(subSelectSubEntity.getCode()).eq(\"test\");\nwhere(entity.getIntegerField()).lt(select(max(subSelectEntity.getIntegerField())));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField &lt; ( SELECT MAX(entity_1.integerField) FROM Entity entity_1 INNER JOIN entity_1.subEntities subEntity_2 WHERE subEntity_2.code = :code_3 )</code></p>"},{"location":"advanced/subqueries/#practical-examples","title":"Practical Examples","text":""},{"location":"advanced/subqueries/#finding-entities-above-average","title":"Finding Entities Above Average","text":"<p>Find all entities with an integer field above the average:</p> <pre><code>Entity entity = from(Entity.class);\nEntity subSelect = from(Entity.class);\nwhere(entity.getIntegerField()).gt(select(avg(subSelect.getIntegerField())));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField &gt; ( SELECT AVG(entity_1.integerField) FROM Entity entity_1 )</code></p>"},{"location":"advanced/subqueries/#finding-entities-with-specific-related-records","title":"Finding Entities with Specific Related Records","text":"<p>Find entities that have at least one related sub-entity with a specific code:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subSelectSubEntity = from(SubEntity.class);\nwhere(subSelectSubEntity.getCode()).eq(\"test\");\nwhere(entity.getId()).in(select(subSelectSubEntity.getId()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre>"},{"location":"advanced/subqueries/#finding-entities-without-related-records","title":"Finding Entities Without Related Records","text":"<p>Find entities that don't have any related sub-entities:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subSelectSubEntity = from(SubEntity.class);\nwhere(entity.getId()).notIn(select(subSelectSubEntity.getEntityId()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre>"},{"location":"advanced/subqueries/#performance-considerations","title":"Performance Considerations","text":"<p>While subqueries are powerful, they can impact performance. Consider these tips:</p> <ol> <li> <p>Join vs. Subquery: In many cases, a join might be more efficient than a subquery.</p> </li> <li> <p>Unnecessary Nesting: Avoid unnecessarily deep nesting of subqueries.</p> </li> <li> <p>Correlation: Correlated subqueries (where the inner query depends on the outer query) can be particularly expensive as they must be executed for each row of the outer query.</p> </li> <li> <p>EXISTS vs. IN: In some databases, EXISTS might perform better than IN for certain types of subqueries.</p> </li> </ol> <p>Always test your queries with realistic data volumes to ensure good performance.</p>"},{"location":"core-concepts/basic-queries/","title":"Basic Queries","text":"<p>TorpedoQuery provides a fluent API for building JPA queries. Let's explore the fundamental query operations.</p>"},{"location":"core-concepts/basic-queries/#creating-a-query-root","title":"Creating a Query Root","text":"<p>Every query starts with a call to the <code>from</code> method to specify the entity you're querying:</p> <pre><code>Entity entity = from(Entity.class);\n</code></pre> <p>This creates a proxy object that captures the methods you call on it to build the query.</p>"},{"location":"core-concepts/basic-queries/#select-queries","title":"SELECT Queries","text":""},{"location":"core-concepts/basic-queries/#selecting-the-entire-entity","title":"Selecting the Entire Entity","text":"<p>To select all fields from an entity:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0</code></p>"},{"location":"core-concepts/basic-queries/#selecting-specific-fields","title":"Selecting Specific Fields","text":"<p>To select specific fields:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(entity.getCode());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.code FROM Entity entity_0</code></p>"},{"location":"core-concepts/basic-queries/#selecting-multiple-fields","title":"Selecting Multiple Fields","text":"<p>To select multiple fields (returns an array of Objects):</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Object[]&gt; query = select(entity.getCode(), entity.getName());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.code, entity_0.name FROM Entity entity_0</code></p>"},{"location":"core-concepts/basic-queries/#selecting-from-chained-properties","title":"Selecting from Chained Properties","text":"<p>You can select properties from nested objects:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(entity.getSubEntity().getCode());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.subEntity.code FROM Entity entity_0</code></p>"},{"location":"core-concepts/basic-queries/#executing-queries","title":"Executing Queries","text":""},{"location":"core-concepts/basic-queries/#getting-a-single-result","title":"Getting a Single Result","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getId()).eq(\"123\");\nQuery&lt;Entity&gt; query = select(entity);\nEntity result = query.get(entityManager);\n</code></pre>"},{"location":"core-concepts/basic-queries/#getting-multiple-results","title":"Getting Multiple Results","text":"<pre><code>Entity entity = from(Entity.class);\nQuery&lt;Entity&gt; query = select(entity);\nList&lt;Entity&gt; results = query.list(entityManager);\n</code></pre>"},{"location":"core-concepts/basic-queries/#parameters-handling","title":"Parameters Handling","text":"<p>TorpedoQuery automatically handles parameters in your queries. Values are automatically parameterized to prevent SQL injection:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.getName()).eq(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n\n// Get the query string and parameters\nString hql = query.getQuery();\nMap&lt;String, Object&gt; parameters = query.getParameters();\n\n// Will contain: {\"name_1\": \"test\"}\n</code></pre>"},{"location":"core-concepts/basic-queries/#entity-name-resolution","title":"Entity Name Resolution","text":"<p>TorpedoQuery intelligently resolves entity names based on JPA annotations:</p> <pre><code>// If your entity class has @Entity(name = \"myEntity\")\n@Entity(name = \"myEntity\")\npublic class EntityWithAnnotationName {\n    // ...\n}\n\n// Your query will use the defined name\nEntityWithAnnotationName entity = from(EntityWithAnnotationName.class);\nQuery&lt;EntityWithAnnotationName&gt; query = select(entity);\n// Generates: SELECT myEntity_0 FROM myEntity myEntity_0\n</code></pre>"},{"location":"core-concepts/basic-queries/#query-reuse","title":"Query Reuse","text":"<p>Once you've defined a query, it's immutable - which means you can safely reuse it:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Entity&gt; select = select(entity);\n// Use select query for one purpose\n\nQuery&lt;String&gt; select2 = select(entity.getName());\n// Use select2 for another purpose\n</code></pre> <p>The original <code>select</code> query remains unchanged.</p>"},{"location":"core-concepts/basic-queries/#handling-primitive-types","title":"Handling Primitive Types","text":"<p>TorpedoQuery properly handles primitive types in your entities:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.getPrimitiveInt()).eq(10);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.primitiveInt = :primitiveInt_1</code></p>"},{"location":"core-concepts/basic-queries/#date-and-time-fields","title":"Date and Time Fields","text":"<p>Working with date fields:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.getDateField()).gt(new Date());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.dateField &gt; :dateField_1</code></p>"},{"location":"core-concepts/basic-queries/#character-fields","title":"Character Fields","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getSmallChar()).eq('c');\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.smallChar = :smallChar_1</code></p>"},{"location":"core-concepts/basic-queries/#polymorphic-queries","title":"Polymorphic Queries","text":"<p>Working with inheritance hierarchies:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity).eq(ExtendEntity.class);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.class = ExtendEntity</code></p>"},{"location":"core-concepts/basic-queries/#dynamic-object-creation","title":"Dynamic Object Creation","text":"<p>TorpedoQuery supports creating objects directly from query results:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;ProjectionEntity&gt; query = select(dyn(new ProjectionEntity(\n    param(entity.getCode()), param(entity.getIntegerField()))));\n</code></pre> <p>Generated HQL: <code>SELECT new org.torpedoquery.jpa.test.bo.ProjectionEntity(entity_0.code, entity_0.integerField) FROM Entity entity_0</code></p> <p>This technique is useful for projections and DTOs.</p>"},{"location":"core-concepts/conditions/","title":"Query Conditions","text":"<p>TorpedoQuery provides a powerful set of methods for creating complex query conditions. This page covers the various ways to filter your queries.</p>"},{"location":"core-concepts/conditions/#basic-comparison-operators","title":"Basic Comparison Operators","text":""},{"location":"core-concepts/conditions/#equality","title":"Equality (=)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).eq(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code = :code_1</code></p>"},{"location":"core-concepts/conditions/#inequality","title":"Inequality (&lt;&gt;)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).neq(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code &lt;&gt; :code_1</code></p>"},{"location":"core-concepts/conditions/#greater-than","title":"Greater Than (&gt;)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getIntegerField()).gt(2);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField &gt; :integerField_1</code></p>"},{"location":"core-concepts/conditions/#greater-than-or-equal","title":"Greater Than or Equal (&gt;=)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getIntegerField()).gte(2);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField &gt;= :integerField_1</code></p>"},{"location":"core-concepts/conditions/#less-than","title":"Less Than (&lt;)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getIntegerField()).lt(2);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField &lt; :integerField_1</code></p>"},{"location":"core-concepts/conditions/#less-than-or-equal","title":"Less Than or Equal (&lt;=)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getIntegerField()).lte(2);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField &lt;= :integerField_1</code></p>"},{"location":"core-concepts/conditions/#null-checks","title":"Null Checks","text":""},{"location":"core-concepts/conditions/#is-null","title":"Is Null","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).isNull();\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code IS NULL</code></p>"},{"location":"core-concepts/conditions/#is-not-null","title":"Is Not Null","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).isNotNull();\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code IS NOT NULL</code></p>"},{"location":"core-concepts/conditions/#between-operator","title":"Between Operator","text":""},{"location":"core-concepts/conditions/#between","title":"Between","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).between(\"A\", \"C\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code BETWEEN :code_1 AND :code_2</code></p>"},{"location":"core-concepts/conditions/#not-between","title":"Not Between","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).notBetween(\"A\", \"C\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code NOT BETWEEN :code_1 AND :code_2</code></p>"},{"location":"core-concepts/conditions/#in-operator","title":"IN Operator","text":""},{"location":"core-concepts/conditions/#in-values","title":"In (Values)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getPrimitiveInt()).in(3, 4);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.primitiveInt IN ( :primitiveInt_1 )</code></p>"},{"location":"core-concepts/conditions/#in-subquery","title":"In (Subquery)","text":"<pre><code>Entity subSelect = from(Entity.class);\nEntity entity = from(Entity.class);\nwhere(entity.getCode()).in(select(subSelect.getCode()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code IN ( SELECT entity_1.code FROM Entity entity_1 )</code></p>"},{"location":"core-concepts/conditions/#not-in-values","title":"Not In (Values)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getPrimitiveInt()).notIn(3, 4);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.primitiveInt NOT IN ( :primitiveInt_1 )</code></p>"},{"location":"core-concepts/conditions/#not-in-subquery","title":"Not In (Subquery)","text":"<pre><code>Entity subSelect = from(Entity.class);\nEntity entity = from(Entity.class);\nwhere(entity.getCode()).notIn(select(subSelect.getCode()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code NOT IN ( SELECT entity_1.code FROM Entity entity_1 )</code></p>"},{"location":"core-concepts/conditions/#like-operator","title":"LIKE Operator","text":""},{"location":"core-concepts/conditions/#like-contains","title":"Like (Contains)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).like().any(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code LIKE :code_1</code> Parameter: <code>%test%</code></p>"},{"location":"core-concepts/conditions/#like-starts-with","title":"Like (Starts With)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).like().startsWith(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code LIKE :code_1</code> Parameter: <code>test%</code></p>"},{"location":"core-concepts/conditions/#like-ends-with","title":"Like (Ends With)","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).like().endsWith(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code LIKE :code_1</code> Parameter: <code>%test</code></p>"},{"location":"core-concepts/conditions/#not-like","title":"Not Like","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).notLike().any(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code NOT LIKE :code_1</code> Parameter: <code>%test%</code></p>"},{"location":"core-concepts/conditions/#collection-operations","title":"Collection Operations","text":""},{"location":"core-concepts/conditions/#is-empty","title":"Is Empty","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getSubEntities()).isEmpty();\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.subEntities IS EMPTY</code></p>"},{"location":"core-concepts/conditions/#is-not-empty","title":"Is Not Empty","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getSubEntities()).isNotEmpty();\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.subEntities IS NOT EMPTY</code></p>"},{"location":"core-concepts/conditions/#collection-size","title":"Collection Size","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getSubEntities()).size().gt(2);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.subEntities.size &gt; :subEntities_1</code></p>"},{"location":"core-concepts/conditions/#member-of","title":"Member Of","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getValueCollection()).memberOf(\"VALUE\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE :valueCollection_1 MEMBER OF entity_0.valueCollection</code></p>"},{"location":"core-concepts/conditions/#logical-operators","title":"Logical Operators","text":""},{"location":"core-concepts/conditions/#and","title":"AND","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getName()).eq(\"test\").and(entity.getPrimitiveInt()).gt(10);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.name = :name_1 AND entity_0.primitiveInt &gt; :primitiveInt_2</code></p>"},{"location":"core-concepts/conditions/#or","title":"OR","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getName()).eq(\"test\").or(entity.getPrimitiveInt()).gt(10);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.name = :name_1 OR entity_0.primitiveInt &gt; :primitiveInt_2</code></p>"},{"location":"core-concepts/conditions/#grouping-conditions","title":"Grouping Conditions","text":"<p>You can create complex conditions by grouping them with parentheses:</p> <pre><code>Entity entity = from(Entity.class);\nOnGoingLogicalCondition condition = condition(entity.getCode()).eq(\"test\").or(entity.getCode()).eq(\"test2\");\nwhere(entity.getName()).eq(\"test\").and(condition);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.name = :name_1 AND ( entity_0.code = :code_2 OR entity_0.code = :code_3 )</code></p>"},{"location":"core-concepts/conditions/#inline-condition-grouping","title":"Inline Condition Grouping","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(entity.getName()).eq(\"test\").or(condition(entity.getCode()).eq(\"test\").or(entity.getCode()).eq(\"test2\"));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.name = :name_1 OR ( entity_0.code = :code_2 OR entity_0.code = :code_3 )</code></p>"},{"location":"core-concepts/conditions/#comparing-entity-fields","title":"Comparing Entity Fields","text":"<p>You can compare one entity field to another:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.getCode()).eq(entity.getName());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.code = entity_0.name</code></p>"},{"location":"core-concepts/conditions/#type-conditions","title":"Type Conditions","text":"<p>Check the concrete type of an entity:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity).eq(ExtendEntity.class);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.class = ExtendEntity</code></p>"},{"location":"core-concepts/conditions/#empty-conditions","title":"Empty Conditions","text":"<p>TorpedoQuery allows you to create empty conditions that can be filled later:</p> <pre><code>Entity entity = from(Entity.class);\nOnGoingLogicalCondition emptyCondition = condition();\nQuery&lt;Entity&gt; query = select(entity);\nwhere(emptyCondition);\n// No WHERE clause is added since the condition is empty\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0</code></p>"},{"location":"core-concepts/conditions/#using-functions-in-conditions","title":"Using Functions in Conditions","text":"<p>You can use functions in your conditions:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(lower(entity.getCode())).like().any(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE lower(entity_0.code) LIKE :function_1</code></p>"},{"location":"core-concepts/conditions/#accessing-condition-objects","title":"Accessing Condition Objects","text":"<p>You can retrieve the condition object from a query:</p> <pre><code>Entity from = from(Entity.class);\nwhere(from.getSmallChar()).eq('c');\nQuery&lt;String&gt; select = select(from.getName());\n\n// Get the current condition\nOptional&lt;OnGoingLogicalCondition&gt; condition = select.condition();\nif (condition.isPresent()) {\n    condition.get().and(from.getId()).eq(\"test\");\n}\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name FROM Entity entity_0 WHERE entity_0.smallChar = :smallChar_1 AND entity_0.id = :id_2</code></p>"},{"location":"core-concepts/conditions/#chained-property-conditions","title":"Chained Property Conditions","text":"<p>You can apply conditions to nested properties:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.getSubEntity().getName()).eq(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.subEntity.name = :name_1</code></p>"},{"location":"core-concepts/functions/","title":"JPA Functions","text":"<p>TorpedoQuery provides a comprehensive set of functions that correspond to JPA/JPQL functions. These functions can be used in SELECT statements, WHERE clauses, and other parts of your queries.</p>"},{"location":"core-concepts/functions/#aggregate-functions","title":"Aggregate Functions","text":""},{"location":"core-concepts/functions/#count","title":"COUNT","text":"<p>Count the number of entities or non-null values:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Long&gt; query = select(count(entity));\n</code></pre> <p>Generated HQL: <code>SELECT COUNT(entity_0) FROM Entity entity_0</code></p> <p>Count a specific field:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Long&gt; query = select(count(entity.getCode()));\n</code></pre> <p>Generated HQL: <code>SELECT COUNT(entity_0.code) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#sum","title":"SUM","text":"<p>Calculate the sum of numeric values:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Integer&gt; query = select(sum(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT SUM(entity_0.integerField) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#avg","title":"AVG","text":"<p>Calculate the average of numeric values:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Integer&gt; query = select(avg(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT AVG(entity_0.integerField) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#min","title":"MIN","text":"<p>Find the minimum value:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Integer&gt; query = select(min(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT MIN(entity_0.integerField) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#max","title":"MAX","text":"<p>Find the maximum value:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Integer&gt; query = select(max(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT MAX(entity_0.integerField) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#string-functions","title":"String Functions","text":""},{"location":"core-concepts/functions/#lower","title":"LOWER","text":"<p>Convert a string to lowercase:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(lower(entity.getCode()));\n</code></pre> <p>Generated HQL: <code>SELECT LOWER(entity_0.code) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#upper","title":"UPPER","text":"<p>Convert a string to uppercase:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(upper(entity.getCode()));\n</code></pre> <p>Generated HQL: <code>SELECT UPPER(entity_0.code) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#trim","title":"TRIM","text":"<p>Remove leading and trailing spaces:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(trim(entity.getCode()));\n</code></pre> <p>Generated HQL: <code>SELECT TRIM(entity_0.code) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#length","title":"LENGTH","text":"<p>Get the length of a string:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Integer&gt; query = select(length(entity.getCode()));\n</code></pre> <p>Generated HQL: <code>SELECT LENGTH(entity_0.code) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#substring","title":"SUBSTRING","text":"<p>Extract a portion of a string:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(substring(entity.getCode(), 2, 4));\n</code></pre> <p>Generated HQL: <code>SELECT SUBSTRING(entity_0.code, 2, 4) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#other-functions","title":"Other Functions","text":""},{"location":"core-concepts/functions/#coalesce","title":"COALESCE","text":"<p>Return the first non-null value:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(coalesce(entity.getCode(), entity.getName()));\n</code></pre> <p>Generated HQL: <code>SELECT COALESCE(entity_0.code, entity_0.name) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#distinct","title":"DISTINCT","text":"<p>Return distinct values:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Entity&gt; query = select(distinct(entity));\n</code></pre> <p>Generated HQL: <code>SELECT DISTINCT entity_0 FROM Entity entity_0</code></p> <p>Distinct on a field:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(distinct(entity.getCode()));\n</code></pre> <p>Generated HQL: <code>SELECT DISTINCT entity_0.code FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#index","title":"INDEX","text":"<p>Get the index of an element in a collection:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity innerJoin = innerJoin(entity.getSubEntities());\nQuery&lt;Object[]&gt; query = select(innerJoin, index(innerJoin));\n</code></pre> <p>Generated HQL: <code>SELECT subEntity_1, INDEX(subEntity_1) FROM Entity entity_0 INNER JOIN entity_0.subEntities subEntity_1</code></p>"},{"location":"core-concepts/functions/#using-functions-in-where-clauses","title":"Using Functions in WHERE Clauses","text":"<p>Functions can be used in WHERE clauses:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(length(entity.getCode())).gt(5);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE LENGTH(entity_0.code) &gt; :function_1</code></p> <pre><code>Entity entity = from(Entity.class);\nwhere(lower(entity.getCode())).like().any(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE LOWER(entity_0.code) LIKE :function_1</code></p>"},{"location":"core-concepts/functions/#custom-functions","title":"Custom Functions","text":"<p>TorpedoQuery allows you to use custom functions defined in your JPA provider:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(function(\"toto\", String.class, entity.getName()));\n</code></pre> <p>Generated HQL: <code>SELECT toto(entity_0.name) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#combining-functions","title":"Combining Functions","text":"<p>Functions can be nested:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Integer&gt; query = select(length(trim(entity.getCode())));\n</code></pre> <p>Generated HQL: <code>SELECT LENGTH(TRIM(entity_0.code)) FROM Entity entity_0</code></p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(function(\"toto\", String.class, max(entity.getIntegerField())));\n</code></pre> <p>Generated HQL: <code>SELECT toto(MAX(entity_0.integerField)) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#counting-distinct-values","title":"Counting Distinct Values","text":"<p>Count distinct values:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Long&gt; query = select(count(distinct(entity.getInterface())));\n</code></pre> <p>Generated HQL: <code>SELECT COUNT(DISTINCT entity_0.interface) FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>TorpedoQuery supports arithmetic operations on numeric fields:</p>"},{"location":"core-concepts/functions/#addition","title":"Addition","text":"<pre><code>Entity entity = from(Entity.class);\nQuery&lt;Integer&gt; query = select(operation(entity.getIntegerField()).plus(entity.getPrimitiveInt()));\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.integerField + entity_0.primitiveInt FROM Entity entity_0</code></p>"},{"location":"core-concepts/functions/#subtraction","title":"Subtraction","text":"<pre><code>Entity entity = from(Entity.class);\nwhere(operation(entity.getBigDecimalField()).subtract(entity.getBigDecimalField2())).gt(constant(BigDecimal.ZERO));\nQuery&lt;BigDecimal&gt; query = select(sum(operation(entity.getBigDecimalField()).subtract(entity.getBigDecimalField2())));\n</code></pre> <p>Generated HQL: <code>SELECT SUM(entity_0.bigDecimalField - entity_0.bigDecimalField2) FROM Entity entity_0 WHERE entity_0.bigDecimalField - entity_0.bigDecimalField2 &gt; 0</code></p>"},{"location":"core-concepts/functions/#using-constants-in-operations","title":"Using Constants in Operations","text":"<pre><code>Entity entity = from(Entity.class);\nEntity existingEntity = from(Entity.class);\nwhere(existingEntity.getId()).eq(\"testid\");\nwhere(entity.getIntegerField()).eq(select(operation(existingEntity.getIntegerField()).subtract(constant(1))));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.integerField = ( SELECT entity_1.integerField - 1 FROM Entity entity_1 WHERE entity_1.id = :id_2 )</code></p>"},{"location":"core-concepts/functions/#using-functions-in-group-by-and-having-clauses","title":"Using Functions in GROUP BY and HAVING Clauses","text":"<p>Functions can also be used in GROUP BY and HAVING clauses:</p> <pre><code>Entity entity = from(Entity.class);\ngroupBy(entity.getIntegerField()).having(entity.getBigDecimalField()).gt(coalesce(sum(entity.getBigDecimalField2()), constant(BigDecimal.ZERO)));\nQuery&lt;Integer&gt; query = select(sum(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT SUM(entity_0.integerField) FROM Entity entity_0 GROUP BY entity_0.integerField HAVING entity_0.bigDecimalField &gt; COALESCE(SUM(entity_0.bigDecimalField2), 0)</code></p>"},{"location":"core-concepts/groupby/","title":"GROUP BY Operations","text":"<p>GROUP BY is a crucial operation in SQL that allows you to aggregate data based on one or more columns. TorpedoQuery provides a clean API for creating GROUP BY clauses and accompanying HAVING conditions.</p>"},{"location":"core-concepts/groupby/#basic-group-by","title":"Basic GROUP BY","text":"<p>Group records by a single field:</p> <pre><code>Entity entity = from(Entity.class);\ngroupBy(entity.getName());\nQuery&lt;Object[]&gt; query = select(entity.getName(), sum(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name, SUM(entity_0.integerField) FROM Entity entity_0 GROUP BY entity_0.name</code></p>"},{"location":"core-concepts/groupby/#multiple-group-by-fields","title":"Multiple GROUP BY Fields","text":"<p>Group by multiple fields:</p> <pre><code>Entity entity = from(Entity.class);\ngroupBy(entity.getName(), entity.getCode());\nQuery&lt;Object[]&gt; query = select(entity.getName(), entity.getCode(), sum(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name, entity_0.code, SUM(entity_0.integerField) FROM Entity entity_0 GROUP BY entity_0.name, entity_0.code</code></p>"},{"location":"core-concepts/groupby/#adding-having-clauses","title":"Adding HAVING Clauses","text":"<p>Filter grouped results with HAVING:</p> <pre><code>Entity entity = from(Entity.class);\ngroupBy(entity.getName()).having(entity.getName()).eq(\"test\");\nQuery&lt;Object[]&gt; query = select(entity.getName(), sum(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name, SUM(entity_0.integerField) FROM Entity entity_0 GROUP BY entity_0.name HAVING entity_0.name = :name_1</code></p>"},{"location":"core-concepts/groupby/#having-with-aggregate-functions","title":"HAVING with Aggregate Functions","text":"<p>Filter groups using aggregate functions:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\ngroupBy(entity.getName()).having(sum(entity.getIntegerField())).lt(sum(subEntity.getNumberField()));\nQuery&lt;String&gt; query = select(entity.getName());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name FROM Entity entity_0 INNER JOIN entity_0.subEntities subEntity_1 GROUP BY entity_0.name HAVING SUM(entity_0.integerField) &lt; SUM(subEntity_1.numberField)</code></p>"},{"location":"core-concepts/groupby/#complex-having-conditions","title":"Complex HAVING Conditions","text":"<p>Create complex HAVING conditions:</p> <pre><code>Entity entity = from(Entity.class);\nOnGoingLogicalCondition condition = condition(entity.getName()).eq(\"test\").or(entity.getName()).eq(\"test2\");\ngroupBy(entity.getName()).having(condition).and(sum(entity.getIntegerField())).gt(2);\nQuery&lt;String&gt; query = select(entity.getName());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name FROM Entity entity_0 GROUP BY entity_0.name HAVING ( entity_0.name = :name_1 OR entity_0.name = :name_2 ) AND SUM(entity_0.integerField) &gt; :function_3</code></p>"},{"location":"core-concepts/groupby/#reversing-the-order-of-complex-having-conditions","title":"Reversing the Order of Complex HAVING Conditions","text":"<p>You can also reverse the order of conditions:</p> <pre><code>Entity entity = from(Entity.class);\nOnGoingLogicalCondition condition = condition(entity.getName()).eq(\"test\").or(entity.getName()).eq(\"test2\");\ngroupBy(entity.getName()).having(sum(entity.getIntegerField())).gt(2).and(condition);\nQuery&lt;String&gt; query = select(entity.getName());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name FROM Entity entity_0 GROUP BY entity_0.name HAVING SUM(entity_0.integerField) &gt; :function_1 AND ( entity_0.name = :name_2 OR entity_0.name = :name_3 )</code></p>"},{"location":"core-concepts/groupby/#using-functions-in-having-clauses","title":"Using Functions in HAVING Clauses","text":"<p>HAVING clauses can use various functions:</p> <pre><code>Entity entity = from(Entity.class);\ngroupBy(entity.getIntegerField()).having(entity.getBigDecimalField()).gt(coalesce(sum(entity.getBigDecimalField2()), constant(BigDecimal.ZERO)));\nQuery&lt;Integer&gt; query = select(sum(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT SUM(entity_0.integerField) FROM Entity entity_0 GROUP BY entity_0.integerField HAVING entity_0.bigDecimalField &gt; COALESCE(SUM(entity_0.bigDecimalField2), 0)</code></p>"},{"location":"core-concepts/groupby/#having-with-entity-properties","title":"HAVING with Entity Properties","text":"<p>You can refer to entities in HAVING clauses:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\ngroupBy(entity.getName()).having(sum(entity.getIntegerField())).lt(subEntity.getNumberField());\nQuery&lt;String&gt; query = select(entity.getName());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name FROM Entity entity_0 INNER JOIN entity_0.subEntities subEntity_1 GROUP BY entity_0.name HAVING SUM(entity_0.integerField) &lt; subEntity_1.numberField</code></p>"},{"location":"core-concepts/groupby/#combining-group-by-with-where-clauses","title":"Combining GROUP BY with WHERE Clauses","text":"<p>GROUP BY works seamlessly with WHERE clauses:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.isActive()).eq(true);\ngroupBy(entity.getName());\nQuery&lt;Object[]&gt; query = select(entity.getName(), sum(entity.getIntegerField()));\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name, SUM(entity_0.integerField) FROM Entity entity_0 WHERE entity_0.active = :active_1 GROUP BY entity_0.name</code></p>"},{"location":"core-concepts/groupby/#combining-having-with-other-conditions","title":"Combining HAVING with Other Conditions","text":"<p>You can combine HAVING with other logical operations:</p> <pre><code>Entity entity = from(Entity.class);\nOnGoingLogicalCondition condition = condition(entity.isActive()).eq(true);\ngroupBy(entity.getName()).having(sum(entity.getIntegerField())).gt(sum(entity.getPrimitiveInt())).or(condition);\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 GROUP BY entity_0.name HAVING SUM(entity_0.integerField) &gt; SUM(entity_0.primitiveInt) OR ( entity_0.active = :active_1 )</code></p>"},{"location":"core-concepts/groupby/#complete-example","title":"Complete Example","text":"<p>Here's a complete example showing GROUP BY with related entities and multiple conditions:</p> <pre><code>// Define entities\nEntity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\n\n// Add WHERE conditions\nwhere(entity.isActive()).eq(true);\n\n// Define GROUP BY with HAVING\ngroupBy(entity.getName(), entity.getCode())\n    .having(sum(entity.getIntegerField())).gt(100)\n    .and(subEntity.getNumberField()).isNotNull();\n\n// Create the final query\nQuery&lt;Object[]&gt; query = select(\n    entity.getName(),\n    entity.getCode(),\n    sum(entity.getIntegerField()),\n    avg(subEntity.getNumberField())\n);\n</code></pre> <p>This creates a query that: 1. Selects active entities and joins with their sub-entities 2. Groups results by name and code 3. Filters groups to only include those with a sum of integer fields greater than 100 and non-null number fields 4. Returns the name, code, sum of integer fields, and average of number fields for each group</p>"},{"location":"core-concepts/joins/","title":"Working with Joins","text":"<p>TorpedoQuery makes it easy to create joins between entities. Joins are essential when your data is spread across multiple tables or entities.</p>"},{"location":"core-concepts/joins/#inner-joins","title":"Inner Joins","text":"<p>An inner join returns records that have matching values in both tables.</p>"},{"location":"core-concepts/joins/#basic-inner-join","title":"Basic Inner Join","text":"<pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntity());\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntity subEntity_1</code></p>"},{"location":"core-concepts/joins/#selecting-from-joined-entities","title":"Selecting from Joined Entities","text":"<pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntity());\n\nQuery&lt;Object[]&gt; query = select(entity.getCode(), subEntity.getCode());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.code, subEntity_1.code FROM Entity entity_0 INNER JOIN entity_0.subEntity subEntity_1</code></p>"},{"location":"core-concepts/joins/#joining-with-collections","title":"Joining with Collections","text":"<p>You can join with collection relationships:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntities subEntity_1</code></p>"},{"location":"core-concepts/joins/#left-joins","title":"Left Joins","text":"<p>A left join returns all records from the left table and the matched records from the right table. The result is NULL from the right side if there is no match.</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = leftJoin(entity.getSubEntity());\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 LEFT JOIN entity_0.subEntity subEntity_1</code></p>"},{"location":"core-concepts/joins/#right-joins","title":"Right Joins","text":"<p>A right join returns all records from the right table and the matched records from the left table. The result is NULL from the left side if there is no match.</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = rightJoin(entity.getSubEntity());\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 RIGHT JOIN entity_0.subEntity subEntity_1</code></p>"},{"location":"core-concepts/joins/#multiple-joins","title":"Multiple Joins","text":"<p>You can create multiple joins in a single query:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntity());\nSubEntity subEntities = innerJoin(entity.getSubEntities());\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntity subEntity_1 INNER JOIN entity_0.subEntities subEntity_2</code></p>"},{"location":"core-concepts/joins/#multiple-joins-on-the-same-property","title":"Multiple Joins on the Same Property","text":"<p>You can also join the same property multiple times:</p> <pre><code>Entity entity = from(Entity.class);\ninnerJoin(entity.getSubEntity());\nleftJoin(entity.getSubEntity());\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntity subEntity_1 LEFT JOIN entity_0.subEntity subEntity_2</code></p>"},{"location":"core-concepts/joins/#conditions-on-joined-entities","title":"Conditions on Joined Entities","text":"<p>You can add where conditions on joined entities:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\nwhere(subEntity.getCode()).eq(\"test\");\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntities subEntity_1 WHERE subEntity_1.code = :code_2</code></p>"},{"location":"core-concepts/joins/#with-clause-join-conditions","title":"WITH Clause (Join Conditions)","text":"<p>The WITH clause allows you to specify conditions directly on the join:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\nwith(subEntity.getCode()).eq(\"test\");\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntities subEntity_1 WITH subEntity_1.code = :code_2</code></p>"},{"location":"core-concepts/joins/#complex-with-conditions","title":"Complex WITH Conditions","text":"<p>You can create complex join conditions:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\nOnGoingLogicalCondition withCondition = \n    condition(subEntity.getCode()).eq(\"test\").or(subEntity.getCode()).eq(\"test2\");\nwith(withCondition);\n\nQuery&lt;SubEntity&gt; query = select(subEntity);\n</code></pre> <p>Generated HQL: <code>SELECT subEntity_1 FROM Entity entity_0 INNER JOIN entity_0.subEntities subEntity_1 WITH ( subEntity_1.code = :code_2 OR subEntity_1.code = :code_3 )</code></p>"},{"location":"core-concepts/joins/#custom-entity-joins","title":"Custom Entity Joins","text":"<p>TorpedoQuery also allows joining unrelated entities with custom conditions:</p> <pre><code>Entity entity = from(Entity.class);\nEntity2 entity2 = innerJoin(Entity2.class).on(query2 -&gt; {\n    return condition(query2.getCode()).eq(entity.getCode());\n});\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN Entity2 entity2_1 ON entity2_1.code = entity_0.code</code></p>"},{"location":"core-concepts/joins/#custom-entity-joins-with-multiple-conditions","title":"Custom Entity Joins with Multiple Conditions","text":"<pre><code>Entity entity = from(Entity.class);\nEntity2 entity2 = innerJoin(Entity2.class).on(query2 -&gt; {\n    return condition(query2.getCode()).eq(entity.getCode())\n        .and(query2.getVar()).eq(\"test\");\n});\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN Entity2 entity2_1 ON entity2_1.code = entity_0.code AND entity2_1.var = :var_2</code></p>"},{"location":"core-concepts/joins/#joining-maps","title":"Joining Maps","text":"<p>You can also join with map collections:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity innerJoin = innerJoin(entity.getSubEntityMap());\nQuery&lt;SubEntity&gt; query = select(innerJoin);\n</code></pre> <p>Generated HQL: <code>SELECT subEntity_1 FROM Entity entity_0 INNER JOIN entity_0.subEntityMap subEntity_1</code></p>"},{"location":"core-concepts/joins/#advanced-example","title":"Advanced Example","text":"<p>Here's a comprehensive example that showcases a chain of joins:</p> <pre><code>User from = from(User.class);\nCity city = innerJoin(from.getCity());\nwith(city.getCode()).in(\"one\", \"two\").or(city.getCode()).notIn(\"three\", \"four\");\nDistrict district = innerJoin(city.getDistrict());\nwith(district.getCode()).notIn(\"exclude1\", \"exclude2\");\nState state = innerJoin(district.getState());\nwith(state.getCode()).eq(\"AP\").or(state.getCode()).eq(\"GUJ\").or(state.getCode()).eq(\"KTK\");\nwith(state.getCountry().getCode()).eq(\"india\");\n\nQuery&lt;User&gt; select = select(from);\n</code></pre> <p>This example shows how to join multiple entities together with conditions on each join, creating a complex but readable query.</p>"},{"location":"core-concepts/orderby/","title":"ORDER BY Operations","text":"<p>ORDER BY clauses allow you to sort your query results. TorpedoQuery makes it easy to define sophisticated sorting rules.</p>"},{"location":"core-concepts/orderby/#basic-ordering","title":"Basic Ordering","text":"<p>Order by a single field:</p> <pre><code>Entity entity = from(Entity.class);\norderBy(entity.getCode());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 ORDER BY entity_0.code</code></p>"},{"location":"core-concepts/orderby/#multiple-fields-ordering","title":"Multiple Fields Ordering","text":"<p>Order by multiple fields:</p> <pre><code>Entity entity = from(Entity.class);\norderBy(entity.getCode(), entity.getName());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 ORDER BY entity_0.code, entity_0.name</code></p>"},{"location":"core-concepts/orderby/#ordering-direction","title":"Ordering Direction","text":""},{"location":"core-concepts/orderby/#ascending-order-asc","title":"Ascending Order (ASC)","text":"<p>Use the <code>asc</code> function to explicitly specify ascending order:</p> <pre><code>Entity entity = from(Entity.class);\norderBy(asc(entity.getCode()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 ORDER BY entity_0.code ASC</code></p>"},{"location":"core-concepts/orderby/#descending-order-desc","title":"Descending Order (DESC)","text":"<p>Use the <code>desc</code> function to specify descending order:</p> <pre><code>Entity entity = from(Entity.class);\norderBy(desc(entity.getCode()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 ORDER BY entity_0.code DESC</code></p>"},{"location":"core-concepts/orderby/#mixed-ordering-directions","title":"Mixed Ordering Directions","text":"<p>Combine ASC and DESC for different fields:</p> <pre><code>Entity entity = from(Entity.class);\norderBy(asc(entity.getCode()), desc(entity.getName()));\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 ORDER BY entity_0.code ASC, entity_0.name DESC</code></p>"},{"location":"core-concepts/orderby/#combining-default-and-explicit-directions","title":"Combining Default and Explicit Directions","text":"<p>Mix default direction (implicitly ascending) with explicit directions:</p> <pre><code>Entity entity = from(Entity.class);\norderBy(asc(entity.getCode()), entity.getName());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 ORDER BY entity_0.code ASC, entity_0.name</code></p>"},{"location":"core-concepts/orderby/#ordering-with-joined-entities","title":"Ordering with Joined Entities","text":"<p>Order by fields from joined entities:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity innerJoin = innerJoin(entity.getSubEntity());\norderBy(innerJoin.getCode());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntity subEntity_1 ORDER BY subEntity_1.code</code></p>"},{"location":"core-concepts/orderby/#multi-level-ordering-with-joins","title":"Multi-level Ordering with Joins","text":"<p>Combine ordering on main entity and joined entities:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity innerJoin = innerJoin(entity.getSubEntity());\norderBy(entity.getCode(), innerJoin.getCode());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntity subEntity_1 ORDER BY entity_0.code, subEntity_1.code</code></p>"},{"location":"core-concepts/orderby/#ordering-with-collection-joins","title":"Ordering with Collection Joins","text":"<p>Order by fields from collection relationships:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\norderBy(subEntity.getCode(), entity.getName());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 INNER JOIN entity_0.subEntities subEntity_1 ORDER BY subEntity_1.code, entity_0.name</code></p>"},{"location":"core-concepts/orderby/#integration-with-other-clauses","title":"Integration with Other Clauses","text":"<p>ORDER BY works seamlessly with other clauses:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\nwhere(entity.isActive()).eq(true);\ngroupBy(entity.getName());\norderBy(entity.getName(), count(subEntity));\nQuery&lt;Object[]&gt; query = select(entity.getName(), count(subEntity));\n</code></pre> <p>This creates a query that: 1. Joins entities with their sub-entities 2. Filters to include only active entities 3. Groups results by name 4. Orders results by name and the count of sub-entities 5. Returns the name and count for each group</p>"},{"location":"core-concepts/orderby/#practical-example","title":"Practical Example","text":"<p>Let's look at a practical example for ordering a result set:</p> <pre><code>// Find all active entities ordered by name (A-Z) and creation date (newest first)\nEntity entity = from(Entity.class);\nwhere(entity.isActive()).eq(true);\norderBy(asc(entity.getName()), desc(entity.getDateField()));\nQuery&lt;Entity&gt; query = select(entity);\nList&lt;Entity&gt; results = query.list(entityManager);\n</code></pre> <p>This query: 1. Filters to include only active entities 2. Orders results alphabetically by name 3. For entities with the same name, orders by date with newest first 4. Returns the complete entity objects</p>"},{"location":"core-concepts/orderby/#order-by-with-pagination","title":"Order By with Pagination","text":"<p>When implementing pagination, ordering becomes crucial for consistent results:</p> <pre><code>// Implementation for paginated results\nEntity entity = from(Entity.class);\nwhere(entity.isActive()).eq(true);\norderBy(entity.getName());  // Always include ordering for consistent pagination\nQuery&lt;Entity&gt; query = select(entity);\n\n// Apply pagination in your EntityManager query\njavax.persistence.Query emQuery = entityManager.createQuery(query.getQuery());\n// Set parameters\nfor (Map.Entry&lt;String, Object&gt; entry : query.getParameters().entrySet()) {\n    emQuery.setParameter(entry.getKey(), entry.getValue());\n}\n// Set pagination\nemQuery.setFirstResult(pageNumber * pageSize);\nemQuery.setMaxResults(pageSize);\n\nList&lt;Entity&gt; results = emQuery.getResultList();\n</code></pre> <p>By including a consistent ordering, you ensure that as you paginate through results, entities don't appear multiple times or get skipped if the database order changes between queries.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Adding TorpedoQuery to your project is straightforward. Choose your preferred dependency management tool:</p>"},{"location":"getting-started/installation/#maven","title":"Maven","text":"<p>Add the following dependency to your <code>pom.xml</code>:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.torpedoquery&lt;/groupId&gt;\n    &lt;artifactId&gt;org.torpedoquery&lt;/artifactId&gt;\n    &lt;version&gt;2.5.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started/installation/#gradle","title":"Gradle","text":"<p>Add this to your <code>build.gradle</code>:</p> <pre><code>implementation 'org.torpedoquery:org.torpedoquery:2.5.2'\n</code></pre> <p>Tip</p> <p>Always check Maven Central for the latest version.</p>"},{"location":"getting-started/installation/#manual-download","title":"Manual Download","text":"<p>You can download the JAR file directly from Maven Central.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>TorpedoQuery requires:</p> <ul> <li>Java 8 or higher</li> <li>A JPA provider (like Hibernate, EclipseLink, etc.)</li> </ul>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that TorpedoQuery is properly installed, create a simple class with the following code:</p> <pre><code>import static org.torpedoquery.jpa.Torpedo.*;\n\n// Your entity class\npublic class MyEntity {\n    private String name;\n    // getters and setters\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n// Test code\npublic class TorpedoQueryTest {\n    public void testQuery() {\n        MyEntity entity = from(MyEntity.class);\n        Query&lt;MyEntity&gt; query = select(entity);\n        String queryString = query.getQuery();\n        System.out.println(queryString);\n        // Should print: select myEntity_0 from MyEntity myEntity_0\n    }\n}\n</code></pre> <p>If everything is set up correctly, you should be able to build this code without errors.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once you've successfully installed TorpedoQuery, check out the Quick Start Guide to begin creating queries.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with TorpedoQuery quickly.</p>"},{"location":"getting-started/quick-start/#basic-setup","title":"Basic Setup","text":"<p>First, import the necessary static methods:</p> <pre><code>import static org.torpedoquery.jpa.Torpedo.*;\n</code></pre>"},{"location":"getting-started/quick-start/#basic-queries","title":"Basic Queries","text":""},{"location":"getting-started/quick-start/#simple-select-query","title":"Simple Select Query","text":"<p>Retrieving all records from an entity:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Entity&gt; query = select(entity);\nList&lt;Entity&gt; results = query.list(entityManager);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0</code></p>"},{"location":"getting-started/quick-start/#selecting-specific-fields","title":"Selecting Specific Fields","text":"<p>Retrieve only specific columns:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;String&gt; query = select(entity.getName());\nList&lt;String&gt; names = query.list(entityManager);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name FROM Entity entity_0</code></p>"},{"location":"getting-started/quick-start/#multiple-fields-selection","title":"Multiple Fields Selection","text":"<p>Select multiple fields as an array:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Object[]&gt; query = select(entity.getName(), entity.getCode());\nList&lt;Object[]&gt; results = query.list(entityManager);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name, entity_0.code FROM Entity entity_0</code></p>"},{"location":"getting-started/quick-start/#adding-conditions","title":"Adding Conditions","text":""},{"location":"getting-started/quick-start/#simple-where-clause","title":"Simple Where Clause","text":"<p>Filter results with a where clause:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.getName()).eq(\"test\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.name = :name_1</code></p>"},{"location":"getting-started/quick-start/#multiple-conditions","title":"Multiple Conditions","text":"<p>Combine conditions with AND:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.getName()).eq(\"test\").and(entity.getCode()).eq(\"ABC\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.name = :name_1 AND entity_0.code = :code_2</code></p> <p>Or with OR:</p> <pre><code>Entity entity = from(Entity.class);\nwhere(entity.getName()).eq(\"test\").or(entity.getName()).eq(\"test2\");\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 WHERE entity_0.name = :name_1 OR entity_0.name = :name_2</code></p>"},{"location":"getting-started/quick-start/#basic-joins","title":"Basic Joins","text":"<p>Join with related entities:</p> <pre><code>Entity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntity());\nQuery&lt;Object[]&gt; query = select(entity.getName(), subEntity.getCode());\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name, subEntity_1.code FROM Entity entity_0 INNER JOIN entity_0.subEntity subEntity_1</code></p>"},{"location":"getting-started/quick-start/#scalar-functions","title":"Scalar Functions","text":"<p>Use aggregate functions:</p> <pre><code>Entity entity = from(Entity.class);\nQuery&lt;Long&gt; query = select(count(entity));\n</code></pre> <p>Generated HQL: <code>SELECT count(entity_0) FROM Entity entity_0</code></p>"},{"location":"getting-started/quick-start/#grouping-results","title":"Grouping Results","text":"<p>Group by a field:</p> <pre><code>Entity entity = from(Entity.class);\ngroupBy(entity.getName());\nQuery&lt;Object[]&gt; query = select(entity.getName(), count(entity));\n</code></pre> <p>Generated HQL: <code>SELECT entity_0.name, count(entity_0) FROM Entity entity_0 GROUP BY entity_0.name</code></p>"},{"location":"getting-started/quick-start/#ordering-results","title":"Ordering Results","text":"<p>Order the results:</p> <pre><code>Entity entity = from(Entity.class);\norderBy(entity.getName());\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre> <p>Generated HQL: <code>SELECT entity_0 FROM Entity entity_0 ORDER BY entity_0.name</code></p>"},{"location":"getting-started/quick-start/#executing-queries","title":"Executing Queries","text":"<p>Use your EntityManager to execute the query:</p> <pre><code>// Get a single result\nEntity result = query.get(entityManager);\n\n// Get a list of results\nList&lt;Entity&gt; results = query.list(entityManager);\n</code></pre>"},{"location":"getting-started/quick-start/#dynamic-query-building","title":"Dynamic Query Building","text":"<p>Create conditions dynamically:</p> <pre><code>Entity entity = from(Entity.class);\n\n// Only add condition if value is provided\nString name = getUserInput();\nif (name != null &amp;&amp; !name.isEmpty()) {\n    where(entity.getName()).eq(name);\n}\n\nQuery&lt;Entity&gt; query = select(entity);\n</code></pre>"},{"location":"getting-started/quick-start/#complete-example","title":"Complete Example","text":"<p>Here's a more comprehensive example showing several features together:</p> <pre><code>// Define query\nEntity entity = from(Entity.class);\nSubEntity subEntity = innerJoin(entity.getSubEntities());\n\n// Add conditions\nwhere(entity.isActive()).eq(true)\n    .and(subEntity.getCode()).like().startsWith(\"ABC\");\n\n// Group and order\ngroupBy(entity.getName());\norderBy(entity.getName());\n\n// Create and execute the query\nQuery&lt;Object[]&gt; query = select(entity.getName(), count(subEntity));\nList&lt;Object[]&gt; results = query.list(entityManager);\n</code></pre> <p>Generated HQL:  <pre><code>SELECT entity_0.name, count(subEntity_1) \nFROM Entity entity_0 \nINNER JOIN entity_0.subEntities subEntity_1 \nWHERE entity_0.active = :active_2 AND subEntity_1.code LIKE :code_3 \nGROUP BY entity_0.name \nORDER BY entity_0.name\n</code></pre></p> <p>That's it! You've learned the basics of TorpedoQuery. Check out the other sections for more advanced features.</p>"}]}